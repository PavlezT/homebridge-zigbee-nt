import { Device } from 'zigbee-herdsman/dist/controller/model';
declare const DEVICES: {
    light: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: ({
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        } | {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {};
            binds: any[];
            configuredReportings: any[];
            meta: {};
        })[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    motionSensor: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    lock: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    lumiLock: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            _binds: any[];
            _configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: any;
        interviewCompleted: boolean;
        interviewing: boolean;
        skipDefaultResponse: boolean;
        meta: {};
        lastSeen: number;
    };
    contactSensor: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    vibrationSensor: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    vibrationSensor2: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: any[];
            outputClusters: any[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: any[];
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        meta: {};
        lastSeen: number;
    };
    ikeaLight: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: number[];
            outputClusters: number[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {
                genBasic: any[];
            };
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        skipDefaultResponse: boolean;
        meta: {};
        lastSeen: number;
        linkquality: number;
    };
    ikeaOnOffButton: {
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        interviewCompleted: boolean;
        softwareBuildID: string;
        lastSeen: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: number[];
            outputClusters: number[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {
                genPowerCfg: {
                    attributes: {
                        batteryPercentageRemaining: number;
                    };
                };
            };
            binds: ({
                cluster: number;
                groupID: number;
                type: string;
                deviceIeeeAddress?: undefined;
                endpointID?: undefined;
            } | {
                cluster: number;
                type: string;
                deviceIeeeAddress: string;
                endpointID: number;
                groupID?: undefined;
            })[];
            configuredReportings: {
                cluster: number;
                attrId: number;
                minRepIntval: number;
                maxRepIntval: number;
                repChange: number;
            }[];
            meta: {};
        }[];
        otaAvailable: boolean;
    };
    lumiRemoteSwitch: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        skipDefaultResponse: boolean;
        meta: {};
        lastSeen: number;
        linkquality: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: number[];
            outputClusters: number[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {
                genBasic: any[];
                genMultistateInput: any[];
            };
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
    };
    somgomsSwitch: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        skipDefaultResponse: boolean;
        meta: {};
        lastSeen: number;
        linkquality: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: number[];
            outputClusters: number[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {
                genBasic: any[];
                genMultistateInput: any[];
            };
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
    };
    tuyaSmartDimmer: {
        ID: number;
        type: string;
        ieeeAddr: string;
        networkAddress: number;
        manufacturerID: number;
        manufacturerName: string;
        powerSource: string;
        modelID: string;
        applicationVersion: number;
        stackVersion: number;
        zclVersion: number;
        hardwareVersion: number;
        dateCode: string;
        softwareBuildID: string;
        interviewCompleted: boolean;
        interviewing: boolean;
        skipDefaultResponse: boolean;
        meta: {};
        lastSeen: number;
        linkquality: number;
        endpoints: {
            ID: number;
            profileID: number;
            deviceID: number;
            inputClusters: number[];
            outputClusters: number[];
            deviceNetworkAddress: number;
            deviceIeeeAddress: string;
            clusters: {
                genBasic: any[];
                genMultistateInput: any[];
            };
            binds: any[];
            configuredReportings: any[];
            meta: {};
        }[];
    };
};
export declare function getDevice(name: keyof typeof DEVICES): Device;
export {};
//# sourceMappingURL=device-builder.d.ts.map